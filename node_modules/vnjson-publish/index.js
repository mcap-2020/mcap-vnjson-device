
const PORT = 3000


const fs = require('fs')
const path = require('path')
const YAML = require('yaml')
const color = require('ansi-colors')
const CONFIG_FILE = path.join(__dirname, '../../config.yaml')

const config = YAML.parse( fs.readFileSync(CONFIG_FILE, 'utf8') )

const PACKAGE_FILE = path.join(__dirname, `../../${config.src}/scenes/$root/package.yaml`)
const PUBLISH = YAML.parse( fs.readFileSync(PACKAGE_FILE, 'utf8') ).publish


if(!PUBLISH) {
  console.log(color.red('Host or token is undefined') )
  return
}
const URL = `${PUBLISH.host}:${PORT}`

const options = {
  autoConnect: false, 
  reconnection: false,
 /* transportOptions: {
    polling: {
      extraHeaders: {
        'Authorization': PUBLISH.token,
      },
    },
  },  */
}
const socket = require('socket.io-client')(URL, options)
const ss = require('socket.io-stream')

const { Twisters } = require('twisters')

const zl = require("zip-lib")

const twisters = new Twisters()

const publicDir = path.join(__dirname, "../../public")
const srcDir = path.join(__dirname, "../../"+config.src)
const pahtToVnjsonFile = path.join(publicDir, 'scenes/vn.json')

const file = fs.readFileSync(pahtToVnjsonFile, 'utf-8')

const commonFileName = `${PUBLISH.token}.zip`

const pathToZipFile = path.join(publicDir, '../', commonFileName)

const pathToSrcZipFile = 'src.zip'
/**
 * src ZIP
 */
function srcToZip (){
  zl.archiveFolder(srcDir, pathToSrcZipFile)
  .then( ()=>{
    commonZip()
      
  }, err => {
    console.error( color.red(err) )
    fs.unlink(pathToSrcZipFile, (err) => {
        if (err) throw err;
    }) 
  })
}
srcToZip()
/**
 * common ZIP
 */
function commonZip (){
  const zip = new zl.Zip();
  zip.addFile( pathToSrcZipFile )
  zip.addFolder(publicDir)
  zip.archive(commonFileName).then( () => {
      fs.unlink(pathToSrcZipFile, (err) => {
        if (err) throw err;
      })
      console.log( color.green(pathToZipFile) )
      socket.connect()
  },  (err) => {

    console.log(err)
  })
}


socket.on('connect',  () => {
  // запуск анимации загрузки
  twisters.put('a', {
      text: color.yellow(PUBLISH.host)
  });
  socket.emit('setFileName', commonFileName, PUBLISH.token)

});



socket.on('fileHasGet', (auth) => {
    if(!auth){
      onEnd( null, color.red('Wrong token') )
      return
    }

    const stream = ss.createStream();
    stream.on('end', (error) => {
        onEnd( error, color.magenta('[+]') )
    });
    ss(socket).emit('uploadFile', stream); 
    fs.createReadStream(pathToZipFile).pipe(stream);
});

function onEnd (error, msg) {
      socket.close();
      if (error) { console.error(color.red(error) ) }
      fs.unlink(pathToZipFile, (err) => {
        if (err) throw err;
      })
      twisters.put('a', {
        active: false,
        text: msg
      })
}

